<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="njnu.edu.back.dao.main.FileMapper">

    <select id="findByFileName" resultType="java.util.Map">
        select * from files where file_name = #{fileName}
    </select>

    <insert id="addFile" parameterType="njnu.edu.back.pojo.File">
        <if test="id != null">
            insert into files values(#{id}::uuid, #{fileName}, #{size}, #{address}, #{uploader}, #{visualType}, #{visualId}, #{folderId});
        </if>
        <if test="id == null">
            insert into files values(default, #{fileName}, #{size}, #{address}, #{uploader}, #{visualType}, #{visualId}, #{folderId});
        </if>
    </insert>


    <select id="findByFolderId" resultType="java.util.HashMap">
        select id, file_name as "fileName", size, uploader, visual_type as "visualType", visual_id as "visualId", folder_id as "folderId"
        from files
        <if test="folderId == ''">
            where uploader = #{email} and folder_id = #{folderId};
        </if>
        <if test="folderId != ''">
            where folder_id = #{folderId}
        </if>
    </select>


    <delete id="batchDelete">
        delete from files
        <foreach collection="list" item="item" open="where id::text in (" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

    <delete id="batchDeleteFolder">
        with recursive temp_folder as (
            select * from folder
            <foreach collection="list" item="item" open="where id::text in (" close=")" separator=",">
                #{item}
            </foreach>
            union
            select f.* from folder f
            inner join temp_folder on temp_folder.id::text = f.parent_id
        ) delete from files where folder_id in (select id::text from temp_folder);
    </delete>


    <select id="findListById" resultType="java.util.HashMap">
        select id, file_name as "fileName", size, address, uploader, visual_type as "visualType", visual_id as "visualId", folder_id as "folderId" from files
        <foreach collection="list" item="item" open="where id::text in (" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="findListByVisualType" resultType="java.util.Map">
        select * from files where visual_type = #{type};
    </select>

    <update id="updateVisualId">
        update files set visual_id = #{visualId} where id::text = #{id}
    </update>

    <select id="findByAddress" resultType="java.util.Map">
        select * from files where address = #{address}
    </select>
    
    <select id="findInfoById" resultType="java.util.Map">
        select id, file_name as "fileName", size, address, uploader, visual_type as "visualType", visual_id as "visualId", folder_id as "folderId"
        from files where id::text = #{id}
    </select>

    <select id="findInfoListById" resultType="java.util.Map">
        select id, file_name as "fileName", size, address, uploader, visual_type as "visualType", visual_id as "visualId", folder_id as "folderId"
        from files
        where id::text in
        <foreach collection="list" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>
</mapper>